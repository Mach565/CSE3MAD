package com.example.deckadence;

import android.util.Log;

import androidx.annotation.NonNull;

import com.example.deckadence.deck.Deck;
import com.example.deckadence.deck.Flashcard;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;
import com.google.firebase.firestore.SetOptions;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;

public class FirebaseHelper {
    private FirebaseFirestore db;
    private String TAG = "FireStore";

    public FirebaseHelper(FirebaseFirestore db) {
        this.db = db;
    }
    // returns string array with deck title and description

    public void addDeck(Deck deck) {
        // use autogenerated ids prevent decks with the same name from sharing cards
        db.collection("Deck").document().set(deck);
        Log.d(TAG, "Added Deck");
    }
    public void addCard(Flashcard card, String deckID) {
        DocumentReference docRef = db.collection("Deck").document(deckID);
        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
            @Override
            public void onSuccess(DocumentSnapshot documentSnapshot) {
                // use autogenerated ids
                db.document("Deck/" + documentSnapshot.getId()).collection("cards").document().set(card, SetOptions.merge());
                Log.d(TAG, "Added Card");
            }
        });
    }

    public void updateCard(String deckId, String cardID, Flashcard card) {
        DocumentReference docRef = db.document("Deck/" + deckId).collection("cards").document(cardID);
        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
            @Override
            public void onSuccess(DocumentSnapshot documentSnapshot) {
                db.document("Deck/" + documentSnapshot.getId()).collection("cards").document(cardID).set(card, SetOptions.merge());
            }
        });
    }
    public ArrayList<String> getCardIds(String deckID) {
        DocumentReference docRef = db.collection("Deck").document(deckID);
        ArrayList<String> cards = new ArrayList<String>();
        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
            @Override
            public void onSuccess(DocumentSnapshot documentSnapshot) {
                // for the deck, access the subcollection 'cards'
                db.document("Deck/" + documentSnapshot.getId()).collection("cards").get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {
                    @Override
                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {
                        for (QueryDocumentSnapshot qs: queryDocumentSnapshots
                        ) {
                            cards.add(qs.getId());
                        }
                    }
                });
            }
        });
        return cards;
    }
    public ArrayList<Flashcard> getCards(String deckID) {
        // gets cards for a given deckID
        DocumentReference docRef = db.collection("Deck").document(deckID);
        ArrayList<Flashcard> cards = new ArrayList<Flashcard>();
        Log.d(TAG,"awaiting cards");
        docRef.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
            @Override
            public void onSuccess(DocumentSnapshot documentSnapshot) {
                // for the deck, access the subcollection 'cards'
                db.document("Deck/" + documentSnapshot.getId()).collection("cards").get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {
                        @Override
                        public void onSuccess(QuerySnapshot queryDocumentSnapshots) {
                            for (QueryDocumentSnapshot qs: queryDocumentSnapshots
                            ) {
                                cards.add(new Flashcard((String) qs.get("question"), (String) qs.get("answer"), (Long) qs.get("experience")));
                            }
                            Log.d(TAG,"got cards");
                        }
                    });
            }
        });
        return cards;
    }

}
